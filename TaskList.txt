	Precise Task List : 
--> Agent avoidance.
--> Add Flying steering. 
	--> integrate Boid.
--> leader Following.
--> Formation : 
	--> geometric formation  (/ Scattered quare / Losange / hexagone )
	--> Formation of formation. 
	--> Strategic formation ( archer, fighter , mage ...)
	--> Find formation slot with more intelligence. 
		--> Not all at the same time. 
	
--> FlowFieldFollowing 
	--> ( Find better flowFieldFunctions)
	--> Make demo where they alternate.
	--> Make 3d flowField.
	
--> Reintegrate surface Steering from old project (walking on Walls) / horde.
--> enhance swarming. 

	Scenario List : 

--> obstacles avoidance.
--> agent avoidance.
--> Leader Following.
--> un endroit avec beacoup d'obstacle. 
	Un chasseur qui wander. lorsqu'il est proche d'un truc il le chase
	Les autres sont des trucs qui wander et flee. 


	Avec le système de formation : 
--> Une formation contient et ordonne une liste de position. 
--> Les unités de steering doivent connaitre une cible à suivre. 
--> La formation doit savoir quelles sont quelles sont les cibles qui sont occupée / libérée. 
--> Le steering peut connaitre une formation et s'autogérer.
--> la formation peut contenir une liste de gars en steering qui lui permet de leur indiquer la cible à suivre. 


--> Si une formation suit une formation. 


	Si je fais le système de stack : 
--> je réorganise tous mes behavir pour cela. 
	--> problème je ne pourrais plus viser des Vector3 mais uniqumeent des transform ce qui peut être chiant. 
--> Qu'est-ce que cela permet ? Après tout suivre une formation ne sera jamais qu'un arrival qui existe déjà. 
	--> je pourrais ajouter des informations relative à la formation pour la suivre correctement. 

	Je peux faire une floppée de petits scripts : 
--> Un qui génère les agents et leurs donne une formation. (--> Un qui représente l'agent et qui suit une direction. )
OU
--> Un qui génère les agents et donne à la formation les agents. (la formation gère les agents).
	--> stackBased is cool. 






	///  changement de positionnement : 
--> Lorsqu'une formation est update. Il va falloir donner de nouvelles 
position aux entités. 
--> Actuellement j'update les positions des slots.  Mais en réalité il faudrait
répartir les positions selon les positions des entités. 
	/// Gestion changement de formation : 
--> les entités ont des slots. Mais ont peur leur changer la formation. 
	--> On pourrais passer par un formation manager. 
	OU
	--> Update le changement de formation. 
--> 



	// formation demo avec Timeline : 
--> Changement de formations. Zoom / dezoom.



Steering : 
	-->ForceBehavior :

--> steering = ForceBehavior + >ForceBehavior 
steering.Clamp(maxSpeed)
velocity += steering*maxAccelation;
velocity.Clamp(maxSpeed)

ppostion += velocity;


 





