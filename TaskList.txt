	Precise Task List : 
--> Refacto all steering code as separate Classes and stack.(Or not)
--> Handle acceleration issues.
--> Add Flying steering. 
	--> integrate Boid.
--> Add animate Units. (Mixamo)
--> Find and make a seek / flee /evade / pursuit scenario.
--> leader Following
--> horde
--> Formation : 
	--> geometric formation  (Square / line / V / Scattered quare / Losange / hexagone / 
	--> Formation of formation. 
	--> Strategic formation ( archer, fighter , mage ...)
	
--> FlowFieldFollowing 
	--> ( Find better flowFieldFunctions)
	--> Make demo where they alternate.
	--> Make 3d flowField.
	
--> Reintegrate surface Steering from old project (walking on Walls)

	Scenario List : 

--> obstacles avoidance.
--> agent avoidance.
--> Leader Following.



	Avec le système de formation : 
--> Une formation contient et ordonne une liste de position. 
--> Les unités de steering doivent connaitre une cible à suivre. 
--> La formation doit savoir quelles sont quelles sont les cibles qui sont occupée / libérée. 
--> Le steering peut connaitre une formation et s'autogérer.
--> la formation peut contenir une liste de gars en steering qui lui permet de leur indiquer la cible à suivre. 

--> Si une formation suit une formation. 


	Si je fais le système de stack : 
--> je réorganise tous mes behavir pour cela. 
	--> problème je ne pourrais plus viser des Vector3 mais uniqumeent des transform ce qui peut être chiant. 
--> Qu'est-ce que cela permet ? Après tout suivre une formation ne sera jamais qu'un arrival qui existe déjà. 
	--> je pourrais ajouter des informations relative à la formation pour la suivre correctement. 

	Je peux faire une floppée de petits scripts : 
--> Un qui génère les agents et leurs donne une formation. (--> Un qui représente l'agent et qui suit une direction. )
OU
--> Un qui génère les agents et donne à la formation les agents. (la formation gère les agents).
	--> stackBased is cool. 


